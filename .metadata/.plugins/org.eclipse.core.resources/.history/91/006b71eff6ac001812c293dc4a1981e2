package com.techlabs.employeedataanalyzer;

import java.io.File;
import java.util.ArrayList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

public class XMLParser {
	ArrayList<Employee> currentEmployee = new ArrayList<Employee>();
	DocumentBuilderFactory docFactory;
	DocumentBuilder docBuilder;
	Document doc;
	ArrayList<Element> currentElement = new ArrayList<Element>();
	int count = 0, index = -1;

	public XMLParser() throws Exception {
		docFactory = DocumentBuilderFactory.newInstance();
		docBuilder = docFactory.newDocumentBuilder();
		doc = docBuilder.newDocument();
	}

	public void generateXML(Employee parentList, Element element) {
		if (count == 0) {
			try {
				doc.appendChild(element);
			} catch (Exception e) {
				System.out.println(e);
			}
			count++;
		} else {
			try {
				currentElement.get(index).appendChild(element);

			} catch (Exception e) {
				System.out.println(e);
			}
		}
	}

	public void generateXMLFile(ArrayList<Employee> parentList) {

		for (Employee employee : parentList) {
			Element element = doc.createElement("Employee");
			element.setAttribute("name", employee.getName());
			generateXML(employee, element);
			if (!employee.getChildEmployeeList().isEmpty()) {
				index++;
				currentEmployee.add(employee);
				currentElement.add(element);
				generateXMLFile(employee.getChildEmployeeList());
				index--;
				currentEmployee.remove(employee);
				currentEmployee.remove(element);
			}

		}

	}

	public void writeInXml() {
		try {
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource source = new DOMSource(doc);
			StreamResult result = new StreamResult(new File("Employee.xml"));
			transformer.transform(source, result);
			System.out.println("File saved!");
		} catch (Exception e) {
			System.out.print(e);
		}

	}

}

/*
 * Employee currentEmployee, previousEmployee; DocumentBuilderFactory
 * docFactory; DocumentBuilder docBuilder; Document doc; Element parentElement,
 * previousParent; int count = 0;
 * 
 * public XMLParser() throws Exception { docFactory =
 * DocumentBuilderFactory.newInstance(); docBuilder =
 * docFactory.newDocumentBuilder(); doc = docBuilder.newDocument(); }
 * 
 * public void generateXML(Employee parentList, Element element) { if (count ==
 * 0) { try { doc.appendChild(element);
 * 
 * } catch (Exception e) { System.out.println(e); } count++; } else { try {
 * parentElement.appendChild(element); if
 * (!parentList.getChildEmployeeList().isEmpty()) {
 * 
 * } } catch (Exception e) { System.out.println(e); } } }
 * 
 * public void generateXMLFile(ArrayList<Employee> parentList) {
 * 
 * for (Employee employee : parentList) { Element element =
 * doc.createElement("Employee"); element.setAttribute("name",
 * employee.getName()); generateXML(employee, element); if
 * (!employee.getChildEmployeeList().isEmpty()) { previousEmployee =
 * currentEmployee; currentEmployee = employee; previousParent = parentElement;
 * parentElement = element; generateXMLFile(employee.getChildEmployeeList()); if
 * (parentList.contains(previousEmployee)) { parentElement = previousParent;
 * currentEmployee = previousEmployee; } }
 * 
 * }
 * 
 * }
 * 
 * public void writeInXml() { try { TransformerFactory transformerFactory =
 * TransformerFactory.newInstance(); Transformer transformer =
 * transformerFactory.newTransformer(); DOMSource source = new DOMSource(doc);
 * StreamResult result = new StreamResult(new File("Employee.xml"));
 * transformer.transform(source, result); System.out.println("File saved!"); }
 * catch (Exception e) { System.out.print(e); }
 * 
 * }
 */